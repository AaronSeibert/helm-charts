# Default values for mosquitto.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
image:
  repository: "eclipse-mosquitto"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

vault:
  bitwarden:
    enabled: false
    # -- Enable Bitwarden Secrets for vault injection
    secretsMap:
    # -- The secrets map (https://bitwarden.com/help/secrets-manager-kubernetes-operator/#deploy-bitwardensecret)
    #  - bwSecretId: ''
    #    secretKeyName: ''
    tokenSecret: ''
    # -- The secret to retrive the Bitwarden Secrets token from
    tokenKey: ''
    # -- The key from `tokenSecret` that contaikns the Bitwarden Secrets token
    organizationId: ''
    # -- Bitwarden Secrets Organization ID that contains the secret to inject

global:
  # -- Sets the fqdn to be used through various templates
  subdomain: mqtt
  domain: seibert.family

nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

controller:
  # -- Create a workload for this chart.
  enabled: true
  # -- Type of the workload object.
  kind: Deployment
  # -- The number of replicas.
  replicas: 1
  # -- Additional annotations for the controller object.
  annotations: {}
  # -- Additional labels for the controller object.
  labels: {}

services:
  - name: websocket
    # -- The service type used.
    type: ClusterIP
    # -- Additional annotations for the service object.
    annotations: {}
    # -- Additional labels for the service object.
    labels: {}
    ports:
    - name: websocket
      # -- The port used as internal port and cluster-wide port if `.service.type` == `ClusterIP`.
      port: 9091
      # -- The external port used if `.service.type` == `NodePort`.
      nodePort: null
      # -- The protocol used for the service.
      protocol: TCP
    - name: mqtt
      # -- The service type used.
      type: ClusterIP
      # -- Additional annotations for the service object.
      annotations: {}
      # -- Additional labels for the service object.
      labels: {}
      port: 1883

ingress:
  # -- Create an Ingress object for exposing this chart
  enabled: true
  className: ""
  gethomepage:
    enabled: true
    description: mosquitto
    group: Ungrouped
    name: mosquitto
    siteMonitor:
      enabled: true
      description: mosquitto
      group: Ungrouped
      name: mosquitto
      # icon: ''
      # widget:
      #   type: ''
      #   url: ''
      # pod-selector: ''
      # weight: 10
      # instance: 'public'
  annotations:
    kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-staging
  paths:
    - path: /
      pathType: Prefix
      backend:
        service:
          name: websocket
          port: websocket
  tls:
    enabled: false
    clusterIssuer: ''

env:
  # -- Timezone for the container.
  - name: TZ
    value: UTC


secret:
  # -- Create a new secret
  create: false
  # -- Use an existing secre
  existingSecret: ''
  # -- Secret Key used when not using an existing secret.
  secretKey: ''
  # -- Additional annotations for the secret object.
  annotations: {}
  # -- Additional labels for the secret object.
  labels: {}
  type: kubernetes.io/service-account-token

bitwardenSecret:
  # -- Create a new secret
  create: false
  # -- Use an existing secre
  token:
  # -- The secret containing the bitwarden machine key (https://bitwarden.com/help/secrets-manager-kubernetes-operator/#create-bitwarden-secrets)
    secret: ''
    key: ''
  map: []
  # -- Secrets map (https://bitwarden.com/help/secrets-manager-kubernetes-operator/#deploy-bitwardensecret)

persistentVolumeClaim:
  # -- Create a new persistent volume claim object.
  create: false
  # -- Mount path of the persistent volume claim object.
  mountPath: ''
  # -- Access mode of the persistent volume claim object.
  accessMode: ReadWriteMany
  # -- Volume mode of the persistent volume claim object.
  volumeMode: Filesystem
  # -- Storage request size for the persistent volume claim object.
  size: 5Gi
  # -- Storage class name for the persistent volume claim object.
  storageClassName: ''
  # -- Use an existing persistent volume claim object.
  existingPersistentVolumeClaim: ''
  # -- Additional annotations for the persistent volume claim object.
  annotations: {}
  # -- Additional labels for the persistent volume claim object.
  labels: {}

serviceAccount:
  # -- Specify the service account used for the controller.
  create: false
  name: ''

rbac:
  # -- Create `Role` and `RoleBinding` objects.
  create: false
  # -- Additional annotations for the role and role binding objects.
  annotations: {}
  # -- Additional labels for the role and role binding objects.
  labels: {}

# -- Pod-level security attributes. More info [here](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context).
securityContext: {}
  # fsGroup: 1000
  # runAsNonRoot: true
  # runAsGroup: 1000
  # runAsUser: 1000

# -- Compute resources used by the container. More info [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Pod-level affinity. More info [here](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling).
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #       - matchExpressions:
  #           - key: kubernetes.io/hostname
  #             operator: In
  #             values:
  #               - my-node-xyz

# -- Pod-level tolerations. More info [here](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling).
tolerations: {}
  # - key: node-role.kubernetes.io/control-plane
  #   operator: Exists
  #   effect: NoSchedule

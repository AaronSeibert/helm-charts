{{- if .Values.controller.enabled -}}
apiVersion: apps/v1
kind: {{ include "base.controller.kind" . }}
metadata:
  name: {{ include "homepage.fullname" . }}
  labels:
    {{- include "homepage.labels" . | nindent 4 }}
    {{- with .Values.controller.labels }}
    {{ toYaml . | indent 4 }}
    {{- end }}
  {{- with .Values.controller.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.controller.replicas }}
  replicas: {{ .Values.controller.replicas }}
  {{- end }}
  {{- if eq (include "base.controller.kind" . ) "StatefulSet" }}
  serviceName: {{ include "homepage.fullname" . }}-headless
  {{- end }}
  selector:
    matchLabels:
      {{- include "homepage.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.controller.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "homepage.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "homepage.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- with .Values.ports.http }}
            {{- if .enabled }}
            - name: http
              containerPort: {{ .port }}
              protocol: {{ default "TCP" .protocol | quote }}
            {{- end }}
            {{- end }}
          env:
            - name: TZ
              value: {{ .Values.env.timezone | quote }}
          volumeMounts:
            - mountPath: /app/config/custom.js
              name: {{ printf "%s-config" (include "homepage.fullname" .) }}
              subpath: custom.js
            - mountPath: /app/config/custom.css
              name: {{ printf "%s-config" (include "homepage.fullname" .) }}
              subPath: custom.css
            - mountPath: /app/config/bookmarks.yaml
              name: {{ printf "%s-config" (include "homepage.fullname" .) }}
              subPath: bookmarks.yaml
            - mountPath: /app/config/docker.yaml
              name: {{ printf "%s-config" (include "homepage.fullname" .) }}
              subPath: docker.yaml
            - mountPath: /app/config/kubernetes.yaml
              name: {{ printf "%s-config" (include "homepage.fullname" .) }}
              subPath: kubernetes.yaml
            - mountPath: /app/config/services.yaml
              name: {{ printf "%s-config" (include "homepage.fullname" .) }}
              subPath: services.yaml
            - mountPath: /app/config/settings.yaml
              name: {{ printf "%s-config" (include "homepage.fullname" .) }}
              subPath: settings.yaml
            - mountPath: /app/config/widgets.yaml
              name: {{ printf "%s-config" (include "homepage.fullname" .) }}
              subPath: widgets.yaml
            - mountPath: /app/config/logs
              name: logs
          startupProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
                - name: Host
                  value: {{ .Values.global.fqdn | quote }}
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              httpHeaders:
                - name: Host
                  value: {{ .Values.global.fqdn | quote }}
              port: http
          readinessProbe:
            httpGet:
              path: /
              httpHeaders:
                - name: Host
                  value: {{ .Values.global.fqdn | quote }}
              port: http
          resources: {{ if not .Values.resources -}}{}{{- end }}
            {{- if .Values.resources }}
            {{- toYaml .Values.resources | nindent 12 }}
            {{- end }}
      volumes:
        {{- if eq (include "base.persistence.enabled" .) "true" }}
        - name: storage-volume
          persistentVolumeClaim:
            {{- if and .Values.persistentVolumeClaim.create (empty .Values.persistentVolumeClaim.existingPersistentVolumeClaim) }}
            claimName: {{ printf "%s-storage" (include "homepage.fullname" . ) }}
            {{- else }}
            claimName: {{ .Values.persistentVolumeClaim.existingPersistentVolumeClaim }}
            {{- end }}
        {{- end }}
      {{- if .Values.securityContext }}
      volumes:
        - name: {{ printf "%s-config" (include "homepage.fullname" .) }}
          configMap:
            name: {{ printf "%s-config" (include "homepage.fullname" .) }}
        - name: logs
          emptyDir: {}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
